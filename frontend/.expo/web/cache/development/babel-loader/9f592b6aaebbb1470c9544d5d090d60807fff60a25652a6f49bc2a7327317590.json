{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport env from \"../config/environment\";\nvar firebaseConfig = env.firebase;\nvar app = initializeApp(firebaseConfig);\nvar auth = getAuth(app);\nexport var signInWithGoogle = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var provider = new GoogleAuthProvider();\n      provider.setCustomParameters({\n        prompt: 'select_account'\n      });\n      var result = yield signInWithPopup(auth, provider);\n      return {\n        name: result.user.displayName,\n        email: result.user.email,\n        uid: result.user.uid\n      };\n    } catch (error) {\n      console.error('Google sign in error:', error);\n      if (error.code === 'auth/configuration-not-found') {\n        throw new Error('Google Sign In is not properly configured. Please try again later.');\n      } else if (error.code === 'auth/popup-blocked') {\n        throw new Error('Please allow popups for this website to sign in with Google.');\n      } else {\n        throw new Error('Failed to sign in with Google. Please try again.');\n      }\n    }\n  });\n  return function signInWithGoogle() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["GoogleAuthProvider","signInWithPopup","initializeApp","getAuth","env","firebaseConfig","firebase","app","auth","signInWithGoogle","_ref","_asyncToGenerator","provider","setCustomParameters","prompt","result","name","user","displayName","email","uid","error","console","code","Error","apply","arguments"],"sources":["/Users/almorris/cursor-test/frontend/src/services/auth.js"],"sourcesContent":["import { GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport env from '../config/environment';\n\nconst firebaseConfig = env.firebase;\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n\nexport const signInWithGoogle = async () => {\n  try {\n    const provider = new GoogleAuthProvider();\n    provider.setCustomParameters({\n      prompt: 'select_account'\n    });\n    const result = await signInWithPopup(auth, provider);\n    return {\n      name: result.user.displayName,\n      email: result.user.email,\n      uid: result.user.uid\n    };\n  } catch (error) {\n    console.error('Google sign in error:', error);\n    if (error.code === 'auth/configuration-not-found') {\n      throw new Error('Google Sign In is not properly configured. Please try again later.');\n    } else if (error.code === 'auth/popup-blocked') {\n      throw new Error('Please allow popups for this website to sign in with Google.');\n    } else {\n      throw new Error('Failed to sign in with Google. Please try again.');\n    }\n  }\n}; "],"mappings":";AAAA,SAASA,kBAAkB,EAAEC,eAAe,QAAQ,eAAe;AACnE,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,QAAQ,eAAe;AACvC,OAAOC,GAAG;AAEV,IAAMC,cAAc,GAAGD,GAAG,CAACE,QAAQ;AAGnC,IAAMC,GAAG,GAAGL,aAAa,CAACG,cAAc,CAAC;AACzC,IAAMG,IAAI,GAAGL,OAAO,CAACI,GAAG,CAAC;AAEzB,OAAO,IAAME,gBAAgB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IAC1C,IAAI;MACF,IAAMC,QAAQ,GAAG,IAAIZ,kBAAkB,CAAC,CAAC;MACzCY,QAAQ,CAACC,mBAAmB,CAAC;QAC3BC,MAAM,EAAE;MACV,CAAC,CAAC;MACF,IAAMC,MAAM,SAASd,eAAe,CAACO,IAAI,EAAEI,QAAQ,CAAC;MACpD,OAAO;QACLI,IAAI,EAAED,MAAM,CAACE,IAAI,CAACC,WAAW;QAC7BC,KAAK,EAAEJ,MAAM,CAACE,IAAI,CAACE,KAAK;QACxBC,GAAG,EAAEL,MAAM,CAACE,IAAI,CAACG;MACnB,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,IAAIA,KAAK,CAACE,IAAI,KAAK,8BAA8B,EAAE;QACjD,MAAM,IAAIC,KAAK,CAAC,oEAAoE,CAAC;MACvF,CAAC,MAAM,IAAIH,KAAK,CAACE,IAAI,KAAK,oBAAoB,EAAE;QAC9C,MAAM,IAAIC,KAAK,CAAC,8DAA8D,CAAC;MACjF,CAAC,MAAM;QACL,MAAM,IAAIA,KAAK,CAAC,kDAAkD,CAAC;MACrE;IACF;EACF,CAAC;EAAA,gBAtBYf,gBAAgBA,CAAA;IAAA,OAAAC,IAAA,CAAAe,KAAA,OAAAC,SAAA;EAAA;AAAA,GAsB5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}