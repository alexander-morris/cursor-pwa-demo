{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { db } from \"./firebase\";\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore';\nexport var logUserResponse = function () {\n  var _ref = _asyncToGenerator(function* (questionData) {\n    try {\n      var question = questionData.question,\n        response = questionData.response,\n        questionIndex = questionData.questionIndex,\n        isLoggedIn = questionData.isLoggedIn,\n        _questionData$userId = questionData.userId,\n        userId = _questionData$userId === void 0 ? null : _questionData$userId;\n      yield addDoc(collection(db, 'user_responses'), {\n        question: question,\n        response: response,\n        questionIndex: questionIndex,\n        timestamp: serverTimestamp(),\n        userId: userId,\n        isLoggedIn: isLoggedIn,\n        sessionId: window.sessionStorage.getItem('sessionId') || Date.now().toString(),\n        userAgent: navigator.userAgent,\n        platform: navigator.platform\n      });\n    } catch (error) {\n      console.error('Error logging user response:', error);\n    }\n  });\n  return function logUserResponse(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["db","collection","addDoc","serverTimestamp","logUserResponse","_ref","_asyncToGenerator","questionData","question","response","questionIndex","isLoggedIn","_questionData$userId","userId","timestamp","sessionId","window","sessionStorage","getItem","Date","now","toString","userAgent","navigator","platform","error","console","_x","apply","arguments"],"sources":["/Users/almorris/cursor-test/frontend/src/services/analytics.js"],"sourcesContent":["import { db } from './firebase';\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore';\n\nexport const logUserResponse = async (questionData) => {\n  try {\n    const { question, response, questionIndex, isLoggedIn, userId = null } = questionData;\n    \n    await addDoc(collection(db, 'user_responses'), {\n      question,\n      response,\n      questionIndex,\n      timestamp: serverTimestamp(),\n      userId,\n      isLoggedIn,\n      sessionId: window.sessionStorage.getItem('sessionId') || Date.now().toString(),\n      userAgent: navigator.userAgent,\n      platform: navigator.platform\n    });\n  } catch (error) {\n    console.error('Error logging user response:', error);\n  }\n}; "],"mappings":";AAAA,SAASA,EAAE;AACX,SAASC,UAAU,EAAEC,MAAM,EAAEC,eAAe,QAAQ,oBAAoB;AAExE,OAAO,IAAMC,eAAe;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,YAAY,EAAK;IACrD,IAAI;MACF,IAAQC,QAAQ,GAAyDD,YAAY,CAA7EC,QAAQ;QAAEC,QAAQ,GAA+CF,YAAY,CAAnEE,QAAQ;QAAEC,aAAa,GAAgCH,YAAY,CAAzDG,aAAa;QAAEC,UAAU,GAAoBJ,YAAY,CAA1CI,UAAU;QAAAC,oBAAA,GAAoBL,YAAY,CAA9BM,MAAM;QAANA,MAAM,GAAAD,oBAAA,cAAG,IAAI,GAAAA,oBAAA;MAEpE,MAAMV,MAAM,CAACD,UAAU,CAACD,EAAE,EAAE,gBAAgB,CAAC,EAAE;QAC7CQ,QAAQ,EAARA,QAAQ;QACRC,QAAQ,EAARA,QAAQ;QACRC,aAAa,EAAbA,aAAa;QACbI,SAAS,EAAEX,eAAe,CAAC,CAAC;QAC5BU,MAAM,EAANA,MAAM;QACNF,UAAU,EAAVA,UAAU;QACVI,SAAS,EAAEC,MAAM,CAACC,cAAc,CAACC,OAAO,CAAC,WAAW,CAAC,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QAC9EC,SAAS,EAAEC,SAAS,CAACD,SAAS;QAC9BE,QAAQ,EAAED,SAAS,CAACC;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAAA,gBAlBYrB,eAAeA,CAAAuB,EAAA;IAAA,OAAAtB,IAAA,CAAAuB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAkB3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}