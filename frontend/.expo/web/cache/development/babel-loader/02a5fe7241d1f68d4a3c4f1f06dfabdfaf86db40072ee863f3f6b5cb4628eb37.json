{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { colors } from \"../../utils/colors\";\nimport { sendMessage } from \"../../services/ai\";\nimport GoogleSignIn from \"../Auth/GoogleSignIn\";\nimport { generateReferralCode } from \"../../utils/referralUtils\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ChatUI(_ref) {\n  var questionsBeforeLogin = _ref.questionsBeforeLogin;\n  var isDev = process.env.NODE_ENV === 'development';\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    input = _useState4[0],\n    setInput = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    connectionError = _useState8[0],\n    setConnectionError = _useState8[1];\n  var _useState9 = useState(0),\n    _useState10 = _slicedToArray(_useState9, 2),\n    questionCount = _useState10[0],\n    setQuestionCount = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    showLoginPrompt = _useState12[0],\n    setShowLoginPrompt = _useState12[1];\n  var _useState13 = useState(null),\n    _useState14 = _slicedToArray(_useState13, 2),\n    user = _useState14[0],\n    setUser = _useState14[1];\n  var listRef = useRef(null);\n  var LOGIN_PROMPT_THRESHOLD = isDev ? questionsBeforeLogin || 5 : 5;\n  useEffect(function () {\n    var welcomeMessage = {\n      id: Date.now(),\n      text: `Welcome! I'm here to help you achieve your goals. What brings you here today?`,\n      sender: 'bot',\n      isQuestion: true\n    };\n    setMessages([welcomeMessage]);\n  }, []);\n  useEffect(function () {\n    if (isDev) {\n      console.log('Development mode: Chat initialized');\n    }\n  }, []);\n  useEffect(function () {\n    if (questionCount >= LOGIN_PROMPT_THRESHOLD && !showLoginPrompt && !user) {\n      console.log(`Showing login prompt after ${questionCount} questions`);\n      setShowLoginPrompt(true);\n    }\n  }, [questionCount, showLoginPrompt, user]);\n  useEffect(function () {\n    var checkConnection = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch('http://localhost:3000/api/health');\n          if (!response.ok) throw new Error('Backend unavailable');\n          setConnectionError(false);\n        } catch (error) {\n          console.error('Connection check failed:', error);\n          setConnectionError(true);\n        }\n      });\n      return function checkConnection() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    checkConnection();\n    var interval = setInterval(checkConnection, 5000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  var handleSendMessage = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      if (!input.trim() || loading) return;\n      try {\n        if (connectionError) {\n          throw new Error('Cannot connect to chat service');\n        }\n        setLoading(true);\n        var userMessage = {\n          id: Date.now(),\n          text: input,\n          sender: 'user'\n        };\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [userMessage]);\n        });\n        setInput('');\n        var result = yield sendMessage(input);\n        if (!result) {\n          throw new Error('No response received from server');\n        }\n        if (!result.text && !result.options) {\n          var fallbackQuestion = {\n            text: \"I didn't quite catch that. Let me ask you something else - what motivates you the most?\",\n            options: [\"Personal growth\", \"Making a difference\", \"Success and achievement\"]\n          };\n          result.text = fallbackQuestion.text;\n          result.options = fallbackQuestion.options;\n        }\n        var botMessage = {\n          id: Date.now(),\n          text: result.text || \"I'm having trouble understanding. Could you rephrase that?\",\n          sender: 'bot',\n          isQuestion: typeof result.text === 'string' && (result.text.includes('?') || result.text.includes(\"I'd like to understand\")),\n          options: result.options || []\n        };\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [botMessage]);\n        });\n        if (botMessage.isQuestion) {\n          var newCount = questionCount + 1;\n          setQuestionCount(newCount);\n        }\n      } catch (error) {\n        console.error('Chat error:', error);\n        var errorMessage;\n        if (connectionError) {\n          errorMessage = 'Cannot connect to chat service. Please check your connection.';\n        } else if (error.message.includes('Empty response') || error.message.includes('No response')) {\n          errorMessage = \"I'm having trouble processing that right now. Let's try a different approach - what interests you most about self-improvement?\";\n        } else {\n          errorMessage = \"I apologize for the confusion. Let's try a different approach - what interests you most about self-improvement?\";\n        }\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [{\n            id: Date.now(),\n            text: errorMessage,\n            sender: 'bot',\n            isQuestion: true,\n            options: [\"Learning and growth\", \"Setting and achieving goals\", \"Building better habits\"]\n          }]);\n        });\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function handleSendMessage() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var handleQuickResponse = function () {\n    var _ref4 = _asyncToGenerator(function* (response) {\n      if (loading) return;\n      try {\n        setLoading(true);\n        var userMessage = {\n          id: Date.now(),\n          text: response,\n          sender: 'user'\n        };\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [userMessage]);\n        });\n        var result = yield sendMessage(response);\n        if (!result) {\n          throw new Error('No response received from server');\n        }\n        if (!result.text && !result.options) {\n          var fallbackQuestion = {\n            text: \"That's interesting. Let me ask you something else - how do you define success?\",\n            options: [\"Personal fulfillment\", \"Professional achievements\", \"Life balance\"]\n          };\n          result.text = fallbackQuestion.text;\n          result.options = fallbackQuestion.options;\n        }\n        var botMessage = {\n          id: Date.now(),\n          text: result.text || \"I understand. Tell me more about that.\",\n          sender: 'bot',\n          isQuestion: typeof result.text === 'string' && (result.text.includes('?') || result.text.includes(\"I'd like to understand\")),\n          options: result.options || []\n        };\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [botMessage]);\n        });\n        if (botMessage.isQuestion) {\n          var newCount = questionCount + 1;\n          setQuestionCount(newCount);\n        }\n      } catch (error) {\n        console.error('Quick response error:', error);\n        var errorMessage;\n        var errorOptions;\n        if (connectionError) {\n          errorMessage = 'Cannot connect to chat service. Please check your connection.';\n          errorOptions = [];\n        } else if (error.message.includes('Empty response') || error.message.includes('No response')) {\n          errorMessage = \"I'd love to explore that further. What aspect of it interests you most?\";\n          errorOptions = [\"The challenge\", \"The opportunity\", \"The potential impact\"];\n        } else {\n          errorMessage = \"That's an interesting perspective. Could you elaborate on what matters most to you?\";\n          errorOptions = [\"Personal development\", \"Achieving goals\", \"Making a difference\"];\n        }\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [{\n            id: Date.now(),\n            text: errorMessage,\n            sender: 'bot',\n            isQuestion: true,\n            options: errorOptions\n          }]);\n        });\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function handleQuickResponse(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var handleGoogleLogin = function handleGoogleLogin() {\n    console.log('Google login clicked');\n  };\n  var handleGoogleSignIn = function () {\n    var _ref5 = _asyncToGenerator(function* (userData) {\n      setUser(userData);\n      setShowLoginPrompt(false);\n      console.log('User signed in:', userData);\n      var referralCode = yield generateReferralCode(userData.uid);\n      setMessages(function (prev) {\n        return [].concat(_toConsumableArray(prev), [{\n          id: Date.now(),\n          text: `Thank you for signing in! Here's your unique referral code: ${referralCode}\\n\\nThis code will expire in 48 hours and can only be used by one person. Share it with someone who would benefit from HustleBot!`,\n          sender: 'bot',\n          isReferralCode: true\n        }]);\n      });\n    });\n    return function handleGoogleSignIn(_x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var handleSkipSignIn = function handleSkipSignIn() {\n    setShowLoginPrompt(false);\n    console.log('User skipped sign in');\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [isDev && _jsx(View, {\n      style: styles.devBanner,\n      children: _jsx(Text, {\n        style: styles.devBannerText,\n        children: \"DEVELOPMENT MODE\"\n      })\n    }), _jsx(FlatList, {\n      ref: listRef,\n      data: messages,\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      },\n      renderItem: function renderItem(_ref6) {\n        var item = _ref6.item;\n        return _jsxs(View, {\n          style: [styles.message, item.sender === 'user' ? styles.userMessage : styles.botMessage, item.isQuestion && styles.questionMessage, item.isReferralCode && styles.referralMessage],\n          children: [_jsx(Text, {\n            style: [styles.messageText, item.sender === 'user' ? styles.userMessageText : styles.botMessageText, item.isQuestion && styles.questionText, item.isReferralCode && styles.referralText],\n            children: item.text\n          }), item.options && item.sender === 'bot' && _jsx(View, {\n            style: styles.optionsContainer,\n            children: item.options.map(function (option, index) {\n              return _jsx(TouchableOpacity, {\n                style: styles.optionButton,\n                onPress: function onPress() {\n                  return handleQuickResponse(option);\n                },\n                disabled: loading,\n                children: _jsx(Text, {\n                  style: styles.optionText,\n                  children: option\n                })\n              }, index);\n            })\n          })]\n        });\n      },\n      onContentSizeChange: function onContentSizeChange() {\n        var _listRef$current;\n        return (_listRef$current = listRef.current) == null ? void 0 : _listRef$current.scrollToEnd();\n      },\n      style: styles.messageList\n    }), showLoginPrompt && _jsx(GoogleSignIn, {\n      onSignIn: handleGoogleSignIn,\n      onClose: handleSkipSignIn\n    }), _jsxs(View, {\n      style: styles.inputContainer,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        value: input,\n        onChangeText: setInput,\n        placeholder: \"Type a message...\",\n        placeholderTextColor: colors.text.tertiary,\n        onSubmitEditing: handleSendMessage,\n        editable: !loading\n      }), loading && _jsx(ActivityIndicator, {\n        style: styles.loader,\n        color: colors.primary\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background.primary,\n    height: '100vh',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  message: {\n    margin: 10,\n    padding: 10,\n    borderRadius: 20,\n    maxWidth: '80%'\n  },\n  userMessage: {\n    backgroundColor: colors.chatBubble.user,\n    alignSelf: 'flex-end',\n    marginLeft: '20%'\n  },\n  botMessage: {\n    backgroundColor: colors.chatBubble.bot,\n    alignSelf: 'flex-start',\n    marginRight: '20%',\n    borderWidth: 1,\n    borderColor: colors.background.tertiary\n  },\n  messageText: {\n    fontSize: 16,\n    lineHeight: 20\n  },\n  userMessageText: {\n    color: colors.text.inverse\n  },\n  botMessageText: {\n    color: colors.text.secondary\n  },\n  inputContainer: {\n    padding: 10,\n    borderTopWidth: 1,\n    borderTopColor: colors.background.tertiary,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    backgroundColor: colors.background.secondary,\n    padding: 12,\n    borderRadius: 20,\n    fontSize: 16,\n    color: colors.text.primary\n  },\n  loader: {\n    marginLeft: 10\n  },\n  devBanner: {\n    backgroundColor: colors.background.tertiary,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  devBannerText: {\n    color: colors.text.secondary,\n    fontWeight: 'bold'\n  },\n  questionMessage: {\n    backgroundColor: colors.chatBubble.system,\n    borderWidth: 1,\n    borderColor: colors.info\n  },\n  questionText: {\n    fontWeight: '500',\n    color: colors.text.secondary\n  },\n  optionsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'flex-start',\n    marginTop: 10,\n    gap: 8\n  },\n  optionButton: {\n    backgroundColor: colors.background.secondary,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: colors.primary\n  },\n  optionText: {\n    color: colors.text.primary,\n    fontSize: 14\n  },\n  loginPrompt: {\n    backgroundColor: colors.background.secondary,\n    padding: 16,\n    margin: 16,\n    borderRadius: 8,\n    alignItems: 'center'\n  },\n  loginText: {\n    color: colors.text.primary,\n    marginBottom: 12,\n    textAlign: 'center'\n  },\n  googleButton: {\n    backgroundColor: '#4285F4',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 4\n  },\n  googleButtonText: {\n    color: colors.text.inverse,\n    fontWeight: 'bold'\n  },\n  messageList: {\n    flex: 1,\n    width: '100%',\n    overflow: 'auto'\n  },\n  referralMessage: {\n    backgroundColor: colors.success,\n    borderWidth: 0,\n    padding: 20\n  },\n  referralText: {\n    color: colors.text.inverse,\n    fontSize: 16,\n    lineHeight: 24,\n    textAlign: 'center'\n  }\n});","map":{"version":3,"names":["React","useState","useRef","useEffect","View","Text","TextInput","StyleSheet","TouchableOpacity","FlatList","ActivityIndicator","colors","sendMessage","GoogleSignIn","generateReferralCode","jsx","_jsx","jsxs","_jsxs","ChatUI","_ref","questionsBeforeLogin","isDev","process","env","NODE_ENV","_useState","_useState2","_slicedToArray","messages","setMessages","_useState3","_useState4","input","setInput","_useState5","_useState6","loading","setLoading","_useState7","_useState8","connectionError","setConnectionError","_useState9","_useState10","questionCount","setQuestionCount","_useState11","_useState12","showLoginPrompt","setShowLoginPrompt","_useState13","_useState14","user","setUser","listRef","LOGIN_PROMPT_THRESHOLD","welcomeMessage","id","Date","now","text","sender","isQuestion","console","log","checkConnection","_ref2","_asyncToGenerator","response","fetch","ok","Error","error","apply","arguments","interval","setInterval","clearInterval","handleSendMessage","_ref3","trim","userMessage","prev","concat","_toConsumableArray","result","options","fallbackQuestion","botMessage","includes","newCount","errorMessage","message","handleQuickResponse","_ref4","errorOptions","_x","handleGoogleLogin","handleGoogleSignIn","_ref5","userData","referralCode","uid","isReferralCode","_x2","handleSkipSignIn","style","styles","container","children","devBanner","devBannerText","ref","data","keyExtractor","item","toString","renderItem","_ref6","questionMessage","referralMessage","messageText","userMessageText","botMessageText","questionText","referralText","optionsContainer","map","option","index","optionButton","onPress","disabled","optionText","onContentSizeChange","_listRef$current","current","scrollToEnd","messageList","onSignIn","onClose","inputContainer","value","onChangeText","placeholder","placeholderTextColor","tertiary","onSubmitEditing","editable","loader","color","primary","create","flex","backgroundColor","background","height","display","flexDirection","margin","padding","borderRadius","maxWidth","chatBubble","alignSelf","marginLeft","bot","marginRight","borderWidth","borderColor","fontSize","lineHeight","inverse","secondary","borderTopWidth","borderTopColor","alignItems","justifyContent","fontWeight","system","info","flexWrap","marginTop","gap","paddingHorizontal","paddingVertical","loginPrompt","loginText","marginBottom","textAlign","googleButton","googleButtonText","width","overflow","success"],"sources":["/Users/almorris/cursor-test/frontend/src/components/Chat/ChatUI.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { View, Text, TextInput, StyleSheet, TouchableOpacity, FlatList, ActivityIndicator } from 'react-native';\nimport { colors } from '../../utils/colors';\nimport { sendMessage } from '../../services/ai';\nimport GoogleSignIn from '../Auth/GoogleSignIn';\nimport { generateReferralCode } from '../../utils/referralUtils';\n\nexport default function ChatUI({ questionsBeforeLogin }) {\n  const isDev = process.env.NODE_ENV === 'development';\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [connectionError, setConnectionError] = useState(false);\n  const [questionCount, setQuestionCount] = useState(0);\n  const [showLoginPrompt, setShowLoginPrompt] = useState(false);\n  const [user, setUser] = useState(null);\n  const listRef = useRef(null);\n\n  // Configure when to show login prompt based on environment and URL params\n  const LOGIN_PROMPT_THRESHOLD = isDev ? \n    (questionsBeforeLogin || 5) : \n    5;\n\n  useEffect(() => {\n    // Add welcome message with initial question\n    const welcomeMessage = {\n      id: Date.now(),\n      text: `Welcome! I'm here to help you achieve your goals. What brings you here today?`,\n      sender: 'bot',\n      isQuestion: true\n    };\n    setMessages([welcomeMessage]);\n  }, []);\n\n  useEffect(() => {\n    if (isDev) {\n      console.log('Development mode: Chat initialized');\n    }\n  }, []);\n\n  // Watch question count and show login prompt at threshold\n  useEffect(() => {\n    if (questionCount >= LOGIN_PROMPT_THRESHOLD && !showLoginPrompt && !user) {\n      console.log(`Showing login prompt after ${questionCount} questions`);\n      setShowLoginPrompt(true);\n    }\n  }, [questionCount, showLoginPrompt, user]);\n\n  useEffect(() => {\n    // Check backend connection\n    const checkConnection = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/health');\n        if (!response.ok) throw new Error('Backend unavailable');\n        setConnectionError(false);\n      } catch (error) {\n        console.error('Connection check failed:', error);\n        setConnectionError(true);\n      }\n    };\n    \n    checkConnection();\n    const interval = setInterval(checkConnection, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleSendMessage = async () => {\n    if (!input.trim() || loading) return;\n    \n    try {\n      if (connectionError) {\n        throw new Error('Cannot connect to chat service');\n      }\n\n      setLoading(true);\n      const userMessage = { id: Date.now(), text: input, sender: 'user' };\n      setMessages(prev => [...prev, userMessage]);\n      setInput('');\n      \n      const result = await sendMessage(input);\n      \n      // Handle various error cases\n      if (!result) {\n        throw new Error('No response received from server');\n      }\n      \n      if (!result.text && !result.options) {\n        // Get a fallback question when we get an empty response\n        const fallbackQuestion = {\n          text: \"I didn't quite catch that. Let me ask you something else - what motivates you the most?\",\n          options: [\"Personal growth\", \"Making a difference\", \"Success and achievement\"]\n        };\n        result.text = fallbackQuestion.text;\n        result.options = fallbackQuestion.options;\n      }\n      \n      const botMessage = {\n        id: Date.now(),\n        text: result.text || \"I'm having trouble understanding. Could you rephrase that?\",\n        sender: 'bot',\n        isQuestion: typeof result.text === 'string' && \n          (result.text.includes('?') || result.text.includes(\"I'd like to understand\")),\n        options: result.options || []\n      };\n      \n      setMessages(prev => [...prev, botMessage]);\n      \n      // Increment question count if this was a question\n      if (botMessage.isQuestion) {\n        const newCount = questionCount + 1;\n        setQuestionCount(newCount);\n      }\n    } catch (error) {\n      console.error('Chat error:', error);\n      // Handle specific error types\n      let errorMessage;\n      if (connectionError) {\n        errorMessage = 'Cannot connect to chat service. Please check your connection.';\n      } else if (error.message.includes('Empty response') || error.message.includes('No response')) {\n        errorMessage = \"I'm having trouble processing that right now. Let's try a different approach - what interests you most about self-improvement?\";\n      } else {\n        errorMessage = \"I apologize for the confusion. Let's try a different approach - what interests you most about self-improvement?\";\n      }\n      \n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: errorMessage,\n        sender: 'bot',\n        isQuestion: true,\n        options: [\n          \"Learning and growth\",\n          \"Setting and achieving goals\",\n          \"Building better habits\"\n        ]\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleQuickResponse = async (response) => {\n    if (loading) return;\n    \n    try {\n      setLoading(true);\n      const userMessage = { id: Date.now(), text: response, sender: 'user' };\n      setMessages(prev => [...prev, userMessage]);\n      \n      const result = await sendMessage(response);\n      \n      // Handle various error cases\n      if (!result) {\n        throw new Error('No response received from server');\n      }\n      \n      if (!result.text && !result.options) {\n        // Get a fallback question when we get an empty response\n        const fallbackQuestion = {\n          text: \"That's interesting. Let me ask you something else - how do you define success?\",\n          options: [\"Personal fulfillment\", \"Professional achievements\", \"Life balance\"]\n        };\n        result.text = fallbackQuestion.text;\n        result.options = fallbackQuestion.options;\n      }\n      \n      const botMessage = {\n        id: Date.now(),\n        text: result.text || \"I understand. Tell me more about that.\",\n        sender: 'bot',\n        isQuestion: typeof result.text === 'string' && \n          (result.text.includes('?') || result.text.includes(\"I'd like to understand\")),\n        options: result.options || []\n      };\n      \n      setMessages(prev => [...prev, botMessage]);\n      \n      // Increment question count and check for login prompt\n      if (botMessage.isQuestion) {\n        const newCount = questionCount + 1;\n        setQuestionCount(newCount);\n      }\n    } catch (error) {\n      console.error('Quick response error:', error);\n      // Handle specific error types with engaging fallback questions\n      let errorMessage;\n      let errorOptions;\n      \n      if (connectionError) {\n        errorMessage = 'Cannot connect to chat service. Please check your connection.';\n        errorOptions = [];\n      } else if (error.message.includes('Empty response') || error.message.includes('No response')) {\n        errorMessage = \"I'd love to explore that further. What aspect of it interests you most?\";\n        errorOptions = [\"The challenge\", \"The opportunity\", \"The potential impact\"];\n      } else {\n        errorMessage = \"That's an interesting perspective. Could you elaborate on what matters most to you?\";\n        errorOptions = [\"Personal development\", \"Achieving goals\", \"Making a difference\"];\n      }\n      \n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: errorMessage,\n        sender: 'bot',\n        isQuestion: true,\n        options: errorOptions\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleLogin = () => {\n    // TODO: Implement Google OAuth\n    console.log('Google login clicked');\n  };\n\n  const handleGoogleSignIn = async (userData) => {\n    setUser(userData);\n    setShowLoginPrompt(false);\n    console.log('User signed in:', userData);\n    \n    // Generate and show referral code\n    const referralCode = await generateReferralCode(userData.uid);\n    \n    setMessages(prev => [...prev, {\n      id: Date.now(),\n      text: `Thank you for signing in! Here's your unique referral code: ${referralCode}\\n\\nThis code will expire in 48 hours and can only be used by one person. Share it with someone who would benefit from HustleBot!`,\n      sender: 'bot',\n      isReferralCode: true\n    }]);\n  };\n\n  const handleSkipSignIn = () => {\n    setShowLoginPrompt(false);\n    console.log('User skipped sign in');\n  };\n\n  return (\n    <View style={styles.container}>\n      {isDev && (\n        <View style={styles.devBanner}>\n          <Text style={styles.devBannerText}>DEVELOPMENT MODE</Text>\n        </View>\n      )}\n      <FlatList\n        ref={listRef}\n        data={messages}\n        keyExtractor={item => item.id.toString()}\n        renderItem={({ item }) => (\n          <View style={[\n            styles.message,\n            item.sender === 'user' ? styles.userMessage : styles.botMessage,\n            item.isQuestion && styles.questionMessage,\n            item.isReferralCode && styles.referralMessage\n          ]}>\n            <Text style={[\n              styles.messageText,\n              item.sender === 'user' ? styles.userMessageText : styles.botMessageText,\n              item.isQuestion && styles.questionText,\n              item.isReferralCode && styles.referralText\n            ]}>\n              {item.text}\n            </Text>\n            {item.options && item.sender === 'bot' && (\n              <View style={styles.optionsContainer}>\n                {item.options.map((option, index) => (\n                  <TouchableOpacity\n                    key={index}\n                    style={styles.optionButton}\n                    onPress={() => handleQuickResponse(option)}\n                    disabled={loading}\n                  >\n                    <Text style={styles.optionText}>{option}</Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            )}\n          </View>\n        )}\n        onContentSizeChange={() => listRef.current?.scrollToEnd()}\n        style={styles.messageList}\n      />\n      \n      {showLoginPrompt && (\n        <GoogleSignIn\n          onSignIn={handleGoogleSignIn}\n          onClose={handleSkipSignIn}\n        />\n      )}\n\n      <View style={styles.inputContainer}>\n        <TextInput\n          style={styles.input}\n          value={input}\n          onChangeText={setInput}\n          placeholder=\"Type a message...\"\n          placeholderTextColor={colors.text.tertiary}\n          onSubmitEditing={handleSendMessage}\n          editable={!loading}\n        />\n        {loading && (\n          <ActivityIndicator \n            style={styles.loader} \n            color={colors.primary} \n          />\n        )}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background.primary,\n    height: '100vh',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  message: {\n    margin: 10,\n    padding: 10,\n    borderRadius: 20,\n    maxWidth: '80%'\n  },\n  userMessage: {\n    backgroundColor: colors.chatBubble.user,\n    alignSelf: 'flex-end',\n    marginLeft: '20%'\n  },\n  botMessage: {\n    backgroundColor: colors.chatBubble.bot,\n    alignSelf: 'flex-start',\n    marginRight: '20%',\n    borderWidth: 1,\n    borderColor: colors.background.tertiary\n  },\n  messageText: {\n    fontSize: 16,\n    lineHeight: 20\n  },\n  userMessageText: {\n    color: colors.text.inverse\n  },\n  botMessageText: {\n    color: colors.text.secondary\n  },\n  inputContainer: {\n    padding: 10,\n    borderTopWidth: 1,\n    borderTopColor: colors.background.tertiary,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    backgroundColor: colors.background.secondary,\n    padding: 12,\n    borderRadius: 20,\n    fontSize: 16,\n    color: colors.text.primary\n  },\n  loader: {\n    marginLeft: 10\n  },\n  devBanner: {\n    backgroundColor: colors.background.tertiary,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  devBannerText: {\n    color: colors.text.secondary,\n    fontWeight: 'bold'\n  },\n  questionMessage: {\n    backgroundColor: colors.chatBubble.system,\n    borderWidth: 1,\n    borderColor: colors.info\n  },\n  questionText: {\n    fontWeight: '500',\n    color: colors.text.secondary\n  },\n  optionsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'flex-start',\n    marginTop: 10,\n    gap: 8\n  },\n  optionButton: {\n    backgroundColor: colors.background.secondary,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: colors.primary\n  },\n  optionText: {\n    color: colors.text.primary,\n    fontSize: 14\n  },\n  loginPrompt: {\n    backgroundColor: colors.background.secondary,\n    padding: 16,\n    margin: 16,\n    borderRadius: 8,\n    alignItems: 'center'\n  },\n  loginText: {\n    color: colors.text.primary,\n    marginBottom: 12,\n    textAlign: 'center'\n  },\n  googleButton: {\n    backgroundColor: '#4285F4',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 4\n  },\n  googleButtonText: {\n    color: colors.text.inverse,\n    fontWeight: 'bold'\n  },\n  messageList: {\n    flex: 1,\n    width: '100%',\n    overflow: 'auto'\n  },\n  referralMessage: {\n    backgroundColor: colors.success,\n    borderWidth: 0,\n    padding: 20\n  },\n  referralText: {\n    color: colors.text.inverse,\n    fontSize: 16,\n    lineHeight: 24,\n    textAlign: 'center'\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}