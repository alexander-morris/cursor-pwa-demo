{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { colors } from \"../../utils/colors\";\nimport { sendMessage } from \"../../services/ai\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ChatUI(_ref) {\n  var userName = _ref.userName;\n  var isDev = process.env.NODE_ENV === 'development';\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    input = _useState4[0],\n    setInput = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    connectionError = _useState8[0],\n    setConnectionError = _useState8[1];\n  var listRef = useRef(null);\n  useEffect(function () {\n    var welcomeMessage = {\n      id: Date.now(),\n      text: `Welcome ${userName}! I'm here to help you achieve your goals. What brings you here today?`,\n      sender: 'bot',\n      isQuestion: true\n    };\n    setMessages([welcomeMessage]);\n  }, [userName]);\n  useEffect(function () {\n    if (isDev && userName === 'Test User') {\n      console.log('Development mode: Test User connected');\n    }\n  }, [userName]);\n  useEffect(function () {\n    var checkConnection = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch('http://localhost:3000/api/health');\n          if (!response.ok) throw new Error('Backend unavailable');\n          setConnectionError(false);\n        } catch (error) {\n          console.error('Connection check failed:', error);\n          setConnectionError(true);\n        }\n      });\n      return function checkConnection() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    checkConnection();\n    var interval = setInterval(checkConnection, 5000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  var handleSendMessage = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      if (!input.trim() || loading) return;\n      try {\n        if (connectionError) {\n          throw new Error('Cannot connect to chat service');\n        }\n        setLoading(true);\n        var userMessage = {\n          id: Date.now(),\n          text: input,\n          sender: 'user'\n        };\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [userMessage]);\n        });\n        setInput('');\n        var _yield$sendMessage = yield sendMessage(input),\n          response = _yield$sendMessage.response;\n        var botMessage = {\n          id: Date.now(),\n          text: response,\n          sender: 'bot',\n          isQuestion: response.includes('?') || response.includes(\"I'd like to understand\")\n        };\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [botMessage]);\n        });\n      } catch (error) {\n        console.error('Chat error:', error);\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [{\n            id: Date.now(),\n            text: connectionError ? 'Cannot connect to chat service. Please check your connection.' : 'Sorry, something went wrong. Please try again.',\n            sender: 'bot'\n          }]);\n        });\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function handleSendMessage() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [isDev && _jsx(View, {\n      style: styles.devBanner,\n      children: _jsx(Text, {\n        style: styles.devBannerText,\n        children: \"DEVELOPMENT MODE\"\n      })\n    }), _jsx(FlatList, {\n      ref: listRef,\n      data: messages,\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      },\n      renderItem: function renderItem(_ref4) {\n        var item = _ref4.item;\n        return _jsx(View, {\n          style: [styles.message, item.sender === 'user' ? styles.userMessage : styles.botMessage, item.isQuestion && styles.questionMessage],\n          children: _jsx(Text, {\n            style: [styles.messageText, item.sender === 'user' ? styles.userMessageText : styles.botMessageText, item.isQuestion && styles.questionText],\n            children: item.text\n          })\n        });\n      },\n      onContentSizeChange: function onContentSizeChange() {\n        var _listRef$current;\n        return (_listRef$current = listRef.current) == null ? void 0 : _listRef$current.scrollToEnd();\n      }\n    }), _jsxs(View, {\n      style: styles.inputContainer,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        value: input,\n        onChangeText: setInput,\n        placeholder: \"Type a message...\",\n        placeholderTextColor: colors.text.tertiary,\n        onSubmitEditing: handleSendMessage,\n        editable: !loading\n      }), loading && _jsx(ActivityIndicator, {\n        style: styles.loader,\n        color: colors.primary\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background.primary\n  },\n  message: {\n    margin: 10,\n    padding: 10,\n    borderRadius: 20,\n    maxWidth: '80%'\n  },\n  userMessage: {\n    backgroundColor: colors.chatBubble.user,\n    alignSelf: 'flex-end',\n    marginLeft: '20%'\n  },\n  botMessage: {\n    backgroundColor: colors.chatBubble.bot,\n    alignSelf: 'flex-start',\n    marginRight: '20%'\n  },\n  messageText: {\n    fontSize: 16,\n    lineHeight: 20\n  },\n  userMessageText: {\n    color: colors.text.inverse\n  },\n  botMessageText: {\n    color: colors.text.primary\n  },\n  inputContainer: {\n    padding: 10,\n    borderTopWidth: 1,\n    borderTopColor: colors.background.tertiary,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    backgroundColor: colors.background.secondary,\n    padding: 12,\n    borderRadius: 20,\n    fontSize: 16,\n    color: colors.text.primary\n  },\n  loader: {\n    marginLeft: 10\n  },\n  devBanner: {\n    backgroundColor: colors.background.tertiary,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  devBannerText: {\n    color: colors.text.inverse,\n    fontWeight: 'bold'\n  },\n  questionMessage: {\n    backgroundColor: colors.chatBubble.system,\n    borderWidth: 1,\n    borderColor: colors.primary\n  },\n  questionText: {\n    fontWeight: '500',\n    color: colors.text.primary\n  }\n});","map":{"version":3,"names":["React","useState","useRef","useEffect","View","TextInput","FlatList","Text","StyleSheet","ActivityIndicator","colors","sendMessage","jsx","_jsx","jsxs","_jsxs","ChatUI","_ref","userName","isDev","process","env","NODE_ENV","_useState","_useState2","_slicedToArray","messages","setMessages","_useState3","_useState4","input","setInput","_useState5","_useState6","loading","setLoading","_useState7","_useState8","connectionError","setConnectionError","listRef","welcomeMessage","id","Date","now","text","sender","isQuestion","console","log","checkConnection","_ref2","_asyncToGenerator","response","fetch","ok","Error","error","apply","arguments","interval","setInterval","clearInterval","handleSendMessage","_ref3","trim","userMessage","prev","concat","_toConsumableArray","_yield$sendMessage","botMessage","includes","style","styles","container","children","devBanner","devBannerText","ref","data","keyExtractor","item","toString","renderItem","_ref4","message","questionMessage","messageText","userMessageText","botMessageText","questionText","onContentSizeChange","_listRef$current","current","scrollToEnd","inputContainer","value","onChangeText","placeholder","placeholderTextColor","tertiary","onSubmitEditing","editable","loader","color","primary","create","flex","backgroundColor","background","margin","padding","borderRadius","maxWidth","chatBubble","user","alignSelf","marginLeft","bot","marginRight","fontSize","lineHeight","inverse","borderTopWidth","borderTopColor","flexDirection","alignItems","secondary","justifyContent","fontWeight","system","borderWidth","borderColor"],"sources":["/Users/almorris/cursor-test/frontend/src/components/Chat/ChatUI.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { View, TextInput, FlatList, Text, StyleSheet, ActivityIndicator } from 'react-native';\nimport { colors } from '../../utils/colors';\nimport { sendMessage } from '../../services/ai';\n\nexport default function ChatUI({ userName }) {\n  const isDev = process.env.NODE_ENV === 'development';\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [connectionError, setConnectionError] = useState(false);\n  const listRef = useRef(null);\n\n  useEffect(() => {\n    // Add welcome message with initial question\n    const welcomeMessage = {\n      id: Date.now(),\n      text: `Welcome ${userName}! I'm here to help you achieve your goals. What brings you here today?`,\n      sender: 'bot',\n      isQuestion: true\n    };\n    setMessages([welcomeMessage]);\n  }, [userName]);\n\n  useEffect(() => {\n    if (isDev && userName === 'Test User') {\n      console.log('Development mode: Test User connected');\n    }\n  }, [userName]);\n\n  useEffect(() => {\n    // Check backend connection\n    const checkConnection = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/health');\n        if (!response.ok) throw new Error('Backend unavailable');\n        setConnectionError(false);\n      } catch (error) {\n        console.error('Connection check failed:', error);\n        setConnectionError(true);\n      }\n    };\n    \n    checkConnection();\n    const interval = setInterval(checkConnection, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleSendMessage = async () => {\n    if (!input.trim() || loading) return;\n    \n    try {\n      if (connectionError) {\n        throw new Error('Cannot connect to chat service');\n      }\n\n      setLoading(true);\n      const userMessage = { id: Date.now(), text: input, sender: 'user' };\n      setMessages(prev => [...prev, userMessage]);\n      setInput('');\n      \n      const { response } = await sendMessage(input);\n      \n      const botMessage = {\n        id: Date.now(),\n        text: response,\n        sender: 'bot',\n        isQuestion: response.includes('?') || response.includes(\"I'd like to understand\")\n      };\n      \n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Chat error:', error);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: connectionError ? \n          'Cannot connect to chat service. Please check your connection.' :\n          'Sorry, something went wrong. Please try again.',\n        sender: 'bot'\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      {isDev && (\n        <View style={styles.devBanner}>\n          <Text style={styles.devBannerText}>DEVELOPMENT MODE</Text>\n        </View>\n      )}\n      <FlatList\n        ref={listRef}\n        data={messages}\n        keyExtractor={item => item.id.toString()}\n        renderItem={({ item }) => (\n          <View style={[\n            styles.message,\n            item.sender === 'user' ? styles.userMessage : styles.botMessage,\n            item.isQuestion && styles.questionMessage\n          ]}>\n            <Text style={[\n              styles.messageText,\n              item.sender === 'user' ? styles.userMessageText : styles.botMessageText,\n              item.isQuestion && styles.questionText\n            ]}>\n              {item.text}\n            </Text>\n          </View>\n        )}\n        onContentSizeChange={() => listRef.current?.scrollToEnd()}\n      />\n      \n      <View style={styles.inputContainer}>\n        <TextInput\n          style={styles.input}\n          value={input}\n          onChangeText={setInput}\n          placeholder=\"Type a message...\"\n          placeholderTextColor={colors.text.tertiary}\n          onSubmitEditing={handleSendMessage}\n          editable={!loading}\n        />\n        {loading && (\n          <ActivityIndicator \n            style={styles.loader} \n            color={colors.primary} \n          />\n        )}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background.primary\n  },\n  message: {\n    margin: 10,\n    padding: 10,\n    borderRadius: 20,\n    maxWidth: '80%'\n  },\n  userMessage: {\n    backgroundColor: colors.chatBubble.user,\n    alignSelf: 'flex-end',\n    marginLeft: '20%'\n  },\n  botMessage: {\n    backgroundColor: colors.chatBubble.bot,\n    alignSelf: 'flex-start',\n    marginRight: '20%'\n  },\n  messageText: {\n    fontSize: 16,\n    lineHeight: 20\n  },\n  userMessageText: {\n    color: colors.text.inverse\n  },\n  botMessageText: {\n    color: colors.text.primary\n  },\n  inputContainer: {\n    padding: 10,\n    borderTopWidth: 1,\n    borderTopColor: colors.background.tertiary,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    backgroundColor: colors.background.secondary,\n    padding: 12,\n    borderRadius: 20,\n    fontSize: 16,\n    color: colors.text.primary\n  },\n  loader: {\n    marginLeft: 10\n  },\n  devBanner: {\n    backgroundColor: colors.background.tertiary,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  devBannerText: {\n    color: colors.text.inverse,\n    fontWeight: 'bold'\n  },\n  questionMessage: {\n    backgroundColor: colors.chatBubble.system,\n    borderWidth: 1,\n    borderColor: colors.primary\n  },\n  questionText: {\n    fontWeight: '500',\n    color: colors.text.primary\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}