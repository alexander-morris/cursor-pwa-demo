{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { colors } from \"../../utils/colors\";\nimport { sendMessage } from \"../../services/ai\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ChatUI(_ref) {\n  var userName = _ref.userName;\n  var isDev = process.env.NODE_ENV === 'development';\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    input = _useState4[0],\n    setInput = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    connectionError = _useState8[0],\n    setConnectionError = _useState8[1];\n  var _useState9 = useState(0),\n    _useState10 = _slicedToArray(_useState9, 2),\n    questionCount = _useState10[0],\n    setQuestionCount = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    showLoginPrompt = _useState12[0],\n    setShowLoginPrompt = _useState12[1];\n  var listRef = useRef(null);\n  useEffect(function () {\n    var welcomeMessage = {\n      id: Date.now(),\n      text: `Welcome ${userName}! I'm here to help you achieve your goals. What brings you here today?`,\n      sender: 'bot',\n      isQuestion: true\n    };\n    setMessages([welcomeMessage]);\n  }, [userName]);\n  useEffect(function () {\n    if (isDev && userName === 'Test User') {\n      console.log('Development mode: Test User connected');\n    }\n  }, [userName]);\n  useEffect(function () {\n    var checkConnection = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch('http://localhost:3000/api/health');\n          if (!response.ok) throw new Error('Backend unavailable');\n          setConnectionError(false);\n        } catch (error) {\n          console.error('Connection check failed:', error);\n          setConnectionError(true);\n        }\n      });\n      return function checkConnection() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    checkConnection();\n    var interval = setInterval(checkConnection, 5000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  var handleSendMessage = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      if (!input.trim() || loading) return;\n      try {\n        if (connectionError) {\n          throw new Error('Cannot connect to chat service');\n        }\n        setLoading(true);\n        var userMessage = {\n          id: Date.now(),\n          text: input,\n          sender: 'user'\n        };\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [userMessage]);\n        });\n        setInput('');\n        var result = yield sendMessage(input);\n        if (!result || !result.text) {\n          throw new Error('Empty response from server');\n        }\n        var botMessage = {\n          id: Date.now(),\n          text: result.text,\n          sender: 'bot',\n          isQuestion: typeof result.text === 'string' && (result.text.includes('?') || result.text.includes(\"I'd like to understand\")),\n          options: result.options || []\n        };\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [botMessage]);\n        });\n        if (botMessage.isQuestion) {\n          setQuestionCount(function (prev) {\n            return prev + 1;\n          });\n        }\n      } catch (error) {\n        console.error('Chat error:', error);\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [{\n            id: Date.now(),\n            text: connectionError ? 'Cannot connect to chat service. Please check your connection.' : 'I apologize for the confusion. Let me ask you something else.',\n            sender: 'bot'\n          }]);\n        });\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function handleSendMessage() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var handleQuickResponse = function () {\n    var _ref4 = _asyncToGenerator(function* (response) {\n      if (loading) return;\n      try {\n        setLoading(true);\n        var userMessage = {\n          id: Date.now(),\n          text: response,\n          sender: 'user'\n        };\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [userMessage]);\n        });\n        var result = yield sendMessage(response);\n        var botMessage = {\n          id: Date.now(),\n          text: result.text,\n          sender: 'bot',\n          isQuestion: typeof result.text === 'string' && (result.text.includes('?') || result.text.includes(\"I'd like to understand\")),\n          options: result.options || []\n        };\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [botMessage]);\n        });\n        if (botMessage.isQuestion) {\n          var newCount = questionCount + 1;\n          setQuestionCount(newCount);\n          if (newCount >= 5 && !showLoginPrompt) {\n            setShowLoginPrompt(true);\n          }\n        }\n      } catch (error) {\n        console.error('Quick response error:', error);\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [{\n            id: Date.now(),\n            text: 'I apologize, but I had trouble processing that. Let me ask something else.',\n            sender: 'bot'\n          }]);\n        });\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function handleQuickResponse(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var handleGoogleLogin = function handleGoogleLogin() {\n    console.log('Google login clicked');\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [isDev && _jsx(View, {\n      style: styles.devBanner,\n      children: _jsx(Text, {\n        style: styles.devBannerText,\n        children: \"DEVELOPMENT MODE\"\n      })\n    }), _jsx(FlatList, {\n      ref: listRef,\n      data: messages,\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      },\n      renderItem: function renderItem(_ref5) {\n        var item = _ref5.item;\n        return _jsxs(View, {\n          style: [styles.message, item.sender === 'user' ? styles.userMessage : styles.botMessage, item.isQuestion && styles.questionMessage],\n          children: [_jsx(Text, {\n            style: [styles.messageText, item.sender === 'user' ? styles.userMessageText : styles.botMessageText, item.isQuestion && styles.questionText],\n            children: item.text\n          }), item.options && item.sender === 'bot' && _jsx(View, {\n            style: styles.optionsContainer,\n            children: item.options.map(function (option, index) {\n              return _jsx(TouchableOpacity, {\n                style: styles.optionButton,\n                onPress: function onPress() {\n                  return handleQuickResponse(option);\n                },\n                disabled: loading,\n                children: _jsx(Text, {\n                  style: styles.optionText,\n                  children: option\n                })\n              }, index);\n            })\n          })]\n        });\n      },\n      onContentSizeChange: function onContentSizeChange() {\n        var _listRef$current;\n        return (_listRef$current = listRef.current) == null ? void 0 : _listRef$current.scrollToEnd();\n      },\n      style: styles.messageList\n    }), showLoginPrompt && _jsxs(View, {\n      style: styles.loginPrompt,\n      children: [_jsx(Text, {\n        style: styles.loginText,\n        children: \"Ready to save your progress? Sign in with Google to continue.\"\n      }), _jsx(TouchableOpacity, {\n        style: styles.googleButton,\n        onPress: handleGoogleLogin,\n        children: _jsx(Text, {\n          style: styles.googleButtonText,\n          children: \"Sign in with Google\"\n        })\n      })]\n    }), _jsxs(View, {\n      style: styles.inputContainer,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        value: input,\n        onChangeText: setInput,\n        placeholder: \"Type a message...\",\n        placeholderTextColor: colors.text.tertiary,\n        onSubmitEditing: handleSendMessage,\n        editable: !loading\n      }), loading && _jsx(ActivityIndicator, {\n        style: styles.loader,\n        color: colors.primary\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background.primary,\n    paddingTop: 20\n  },\n  message: {\n    margin: 10,\n    padding: 10,\n    borderRadius: 20,\n    maxWidth: '80%'\n  },\n  userMessage: {\n    backgroundColor: colors.chatBubble.user,\n    alignSelf: 'flex-end',\n    marginLeft: '20%'\n  },\n  botMessage: {\n    backgroundColor: colors.chatBubble.bot,\n    alignSelf: 'flex-start',\n    marginRight: '20%'\n  },\n  messageText: {\n    fontSize: 16,\n    lineHeight: 20\n  },\n  userMessageText: {\n    color: colors.text.inverse\n  },\n  botMessageText: {\n    color: colors.text.primary\n  },\n  inputContainer: {\n    padding: 10,\n    borderTopWidth: 1,\n    borderTopColor: colors.background.tertiary,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    backgroundColor: colors.background.secondary,\n    padding: 12,\n    borderRadius: 20,\n    fontSize: 16,\n    color: colors.text.primary\n  },\n  loader: {\n    marginLeft: 10\n  },\n  devBanner: {\n    backgroundColor: colors.background.tertiary,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  devBannerText: {\n    color: colors.text.inverse,\n    fontWeight: 'bold'\n  },\n  questionMessage: {\n    backgroundColor: colors.chatBubble.system,\n    borderWidth: 1,\n    borderColor: colors.primary\n  },\n  questionText: {\n    fontWeight: '500',\n    color: colors.text.primary\n  },\n  optionsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'flex-start',\n    marginTop: 10,\n    gap: 8\n  },\n  optionButton: {\n    backgroundColor: colors.background.secondary,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: colors.primary\n  },\n  optionText: {\n    color: colors.text.primary,\n    fontSize: 14\n  },\n  loginPrompt: {\n    backgroundColor: colors.background.secondary,\n    padding: 16,\n    margin: 16,\n    borderRadius: 8,\n    alignItems: 'center'\n  },\n  loginText: {\n    color: colors.text.primary,\n    marginBottom: 12,\n    textAlign: 'center'\n  },\n  googleButton: {\n    backgroundColor: '#4285F4',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 4\n  },\n  googleButtonText: {\n    color: colors.text.inverse,\n    fontWeight: 'bold'\n  },\n  messageList: {\n    flex: 1,\n    width: '100%'\n  }\n});","map":{"version":3,"names":["React","useState","useRef","useEffect","View","Text","TextInput","StyleSheet","TouchableOpacity","FlatList","ActivityIndicator","colors","sendMessage","jsx","_jsx","jsxs","_jsxs","ChatUI","_ref","userName","isDev","process","env","NODE_ENV","_useState","_useState2","_slicedToArray","messages","setMessages","_useState3","_useState4","input","setInput","_useState5","_useState6","loading","setLoading","_useState7","_useState8","connectionError","setConnectionError","_useState9","_useState10","questionCount","setQuestionCount","_useState11","_useState12","showLoginPrompt","setShowLoginPrompt","listRef","welcomeMessage","id","Date","now","text","sender","isQuestion","console","log","checkConnection","_ref2","_asyncToGenerator","response","fetch","ok","Error","error","apply","arguments","interval","setInterval","clearInterval","handleSendMessage","_ref3","trim","userMessage","prev","concat","_toConsumableArray","result","botMessage","includes","options","handleQuickResponse","_ref4","newCount","_x","handleGoogleLogin","style","styles","container","children","devBanner","devBannerText","ref","data","keyExtractor","item","toString","renderItem","_ref5","message","questionMessage","messageText","userMessageText","botMessageText","questionText","optionsContainer","map","option","index","optionButton","onPress","disabled","optionText","onContentSizeChange","_listRef$current","current","scrollToEnd","messageList","loginPrompt","loginText","googleButton","googleButtonText","inputContainer","value","onChangeText","placeholder","placeholderTextColor","tertiary","onSubmitEditing","editable","loader","color","primary","create","flex","backgroundColor","background","paddingTop","margin","padding","borderRadius","maxWidth","chatBubble","user","alignSelf","marginLeft","bot","marginRight","fontSize","lineHeight","inverse","borderTopWidth","borderTopColor","flexDirection","alignItems","secondary","justifyContent","fontWeight","system","borderWidth","borderColor","flexWrap","marginTop","gap","paddingHorizontal","paddingVertical","marginBottom","textAlign","width"],"sources":["/Users/almorris/cursor-test/frontend/src/components/Chat/ChatUI.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { View, Text, TextInput, StyleSheet, TouchableOpacity, FlatList, ActivityIndicator } from 'react-native';\nimport { colors } from '../../utils/colors';\nimport { sendMessage } from '../../services/ai';\n\nexport default function ChatUI({ userName }) {\n  const isDev = process.env.NODE_ENV === 'development';\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [connectionError, setConnectionError] = useState(false);\n  const [questionCount, setQuestionCount] = useState(0);\n  const [showLoginPrompt, setShowLoginPrompt] = useState(false);\n  const listRef = useRef(null);\n\n  useEffect(() => {\n    // Add welcome message with initial question\n    const welcomeMessage = {\n      id: Date.now(),\n      text: `Welcome ${userName}! I'm here to help you achieve your goals. What brings you here today?`,\n      sender: 'bot',\n      isQuestion: true\n    };\n    setMessages([welcomeMessage]);\n  }, [userName]);\n\n  useEffect(() => {\n    if (isDev && userName === 'Test User') {\n      console.log('Development mode: Test User connected');\n    }\n  }, [userName]);\n\n  useEffect(() => {\n    // Check backend connection\n    const checkConnection = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/health');\n        if (!response.ok) throw new Error('Backend unavailable');\n        setConnectionError(false);\n      } catch (error) {\n        console.error('Connection check failed:', error);\n        setConnectionError(true);\n      }\n    };\n    \n    checkConnection();\n    const interval = setInterval(checkConnection, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleSendMessage = async () => {\n    if (!input.trim() || loading) return;\n    \n    try {\n      if (connectionError) {\n        throw new Error('Cannot connect to chat service');\n      }\n\n      setLoading(true);\n      const userMessage = { id: Date.now(), text: input, sender: 'user' };\n      setMessages(prev => [...prev, userMessage]);\n      setInput('');\n      \n      const result = await sendMessage(input);\n      \n      if (!result || !result.text) {\n        throw new Error('Empty response from server');\n      }\n      \n      const botMessage = {\n        id: Date.now(),\n        text: result.text,\n        sender: 'bot',\n        isQuestion: typeof result.text === 'string' && \n          (result.text.includes('?') || result.text.includes(\"I'd like to understand\")),\n        options: result.options || []\n      };\n      \n      setMessages(prev => [...prev, botMessage]);\n      \n      // Increment question count if this was a question\n      if (botMessage.isQuestion) {\n        setQuestionCount(prev => prev + 1);\n      }\n    } catch (error) {\n      console.error('Chat error:', error);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: connectionError ? \n          'Cannot connect to chat service. Please check your connection.' :\n          'I apologize for the confusion. Let me ask you something else.',\n        sender: 'bot'\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleQuickResponse = async (response) => {\n    if (loading) return;\n    \n    try {\n      setLoading(true);\n      const userMessage = { id: Date.now(), text: response, sender: 'user' };\n      setMessages(prev => [...prev, userMessage]);\n      \n      const result = await sendMessage(response);\n      \n      const botMessage = {\n        id: Date.now(),\n        text: result.text,\n        sender: 'bot',\n        isQuestion: typeof result.text === 'string' && \n          (result.text.includes('?') || result.text.includes(\"I'd like to understand\")),\n        options: result.options || []\n      };\n      \n      setMessages(prev => [...prev, botMessage]);\n      \n      // Increment question count and check for login prompt\n      if (botMessage.isQuestion) {\n        const newCount = questionCount + 1;\n        setQuestionCount(newCount);\n        if (newCount >= 5 && !showLoginPrompt) {\n          setShowLoginPrompt(true);\n        }\n      }\n    } catch (error) {\n      console.error('Quick response error:', error);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: 'I apologize, but I had trouble processing that. Let me ask something else.',\n        sender: 'bot'\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleLogin = () => {\n    // TODO: Implement Google OAuth\n    console.log('Google login clicked');\n  };\n\n  return (\n    <View style={styles.container}>\n      {isDev && (\n        <View style={styles.devBanner}>\n          <Text style={styles.devBannerText}>DEVELOPMENT MODE</Text>\n        </View>\n      )}\n      <FlatList\n        ref={listRef}\n        data={messages}\n        keyExtractor={item => item.id.toString()}\n        renderItem={({ item }) => (\n          <View style={[\n            styles.message,\n            item.sender === 'user' ? styles.userMessage : styles.botMessage,\n            item.isQuestion && styles.questionMessage\n          ]}>\n            <Text style={[\n              styles.messageText,\n              item.sender === 'user' ? styles.userMessageText : styles.botMessageText,\n              item.isQuestion && styles.questionText\n            ]}>\n              {item.text}\n            </Text>\n            {item.options && item.sender === 'bot' && (\n              <View style={styles.optionsContainer}>\n                {item.options.map((option, index) => (\n                  <TouchableOpacity\n                    key={index}\n                    style={styles.optionButton}\n                    onPress={() => handleQuickResponse(option)}\n                    disabled={loading}\n                  >\n                    <Text style={styles.optionText}>{option}</Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            )}\n          </View>\n        )}\n        onContentSizeChange={() => listRef.current?.scrollToEnd()}\n        style={styles.messageList}\n      />\n      \n      {showLoginPrompt && (\n        <View style={styles.loginPrompt}>\n          <Text style={styles.loginText}>\n            Ready to save your progress? Sign in with Google to continue.\n          </Text>\n          <TouchableOpacity \n            style={styles.googleButton}\n            onPress={handleGoogleLogin}\n          >\n            <Text style={styles.googleButtonText}>Sign in with Google</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n\n      <View style={styles.inputContainer}>\n        <TextInput\n          style={styles.input}\n          value={input}\n          onChangeText={setInput}\n          placeholder=\"Type a message...\"\n          placeholderTextColor={colors.text.tertiary}\n          onSubmitEditing={handleSendMessage}\n          editable={!loading}\n        />\n        {loading && (\n          <ActivityIndicator \n            style={styles.loader} \n            color={colors.primary} \n          />\n        )}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background.primary,\n    paddingTop: 20\n  },\n  message: {\n    margin: 10,\n    padding: 10,\n    borderRadius: 20,\n    maxWidth: '80%'\n  },\n  userMessage: {\n    backgroundColor: colors.chatBubble.user,\n    alignSelf: 'flex-end',\n    marginLeft: '20%'\n  },\n  botMessage: {\n    backgroundColor: colors.chatBubble.bot,\n    alignSelf: 'flex-start',\n    marginRight: '20%'\n  },\n  messageText: {\n    fontSize: 16,\n    lineHeight: 20\n  },\n  userMessageText: {\n    color: colors.text.inverse\n  },\n  botMessageText: {\n    color: colors.text.primary\n  },\n  inputContainer: {\n    padding: 10,\n    borderTopWidth: 1,\n    borderTopColor: colors.background.tertiary,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    backgroundColor: colors.background.secondary,\n    padding: 12,\n    borderRadius: 20,\n    fontSize: 16,\n    color: colors.text.primary\n  },\n  loader: {\n    marginLeft: 10\n  },\n  devBanner: {\n    backgroundColor: colors.background.tertiary,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  devBannerText: {\n    color: colors.text.inverse,\n    fontWeight: 'bold'\n  },\n  questionMessage: {\n    backgroundColor: colors.chatBubble.system,\n    borderWidth: 1,\n    borderColor: colors.primary\n  },\n  questionText: {\n    fontWeight: '500',\n    color: colors.text.primary\n  },\n  optionsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'flex-start',\n    marginTop: 10,\n    gap: 8\n  },\n  optionButton: {\n    backgroundColor: colors.background.secondary,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: colors.primary\n  },\n  optionText: {\n    color: colors.text.primary,\n    fontSize: 14\n  },\n  loginPrompt: {\n    backgroundColor: colors.background.secondary,\n    padding: 16,\n    margin: 16,\n    borderRadius: 8,\n    alignItems: 'center'\n  },\n  loginText: {\n    color: colors.text.primary,\n    marginBottom: 12,\n    textAlign: 'center'\n  },\n  googleButton: {\n    backgroundColor: '#4285F4',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 4\n  },\n  googleButtonText: {\n    color: colors.text.inverse,\n    fontWeight: 'bold'\n  },\n  messageList: {\n    flex: 1,\n    width: '100%'\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}