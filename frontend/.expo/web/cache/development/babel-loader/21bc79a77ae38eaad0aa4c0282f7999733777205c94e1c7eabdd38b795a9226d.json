{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nvar firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.FIREBASE_PROJECT_ID\n};\nvar app = initializeApp(firebaseConfig);\nvar auth = getAuth(app);\nexport var signInWithGoogle = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var provider = new GoogleAuthProvider();\n      var result = yield signInWithPopup(auth, provider);\n      return {\n        name: result.user.displayName,\n        email: result.user.email,\n        uid: result.user.uid\n      };\n    } catch (error) {\n      console.error('Google sign in error:', error);\n      throw error;\n    }\n  });\n  return function signInWithGoogle() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["GoogleAuthProvider","signInWithPopup","initializeApp","getAuth","firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","FIREBASE_AUTH_DOMAIN","projectId","FIREBASE_PROJECT_ID","app","auth","signInWithGoogle","_ref","_asyncToGenerator","provider","result","name","user","displayName","email","uid","error","console","apply","arguments"],"sources":["/Users/almorris/cursor-test/frontend/src/services/auth.js"],"sourcesContent":["import { GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\n\nconst firebaseConfig = {\n  // TODO: Add your Firebase config here\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n\nexport const signInWithGoogle = async () => {\n  try {\n    const provider = new GoogleAuthProvider();\n    const result = await signInWithPopup(auth, provider);\n    return {\n      name: result.user.displayName,\n      email: result.user.email,\n      uid: result.user.uid\n    };\n  } catch (error) {\n    console.error('Google sign in error:', error);\n    throw error;\n  }\n}; "],"mappings":";AAAA,SAASA,kBAAkB,EAAEC,eAAe,QAAQ,eAAe;AACnE,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,QAAQ,eAAe;AAEvC,IAAMC,cAAc,GAAG;EAErBC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,gBAAgB;EACpCC,UAAU,EAAEH,OAAO,CAACC,GAAG,CAACG,oBAAoB;EAC5CC,SAAS,EAAEL,OAAO,CAACC,GAAG,CAACK;AACzB,CAAC;AAGD,IAAMC,GAAG,GAAGX,aAAa,CAACE,cAAc,CAAC;AACzC,IAAMU,IAAI,GAAGX,OAAO,CAACU,GAAG,CAAC;AAEzB,OAAO,IAAME,gBAAgB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IAC1C,IAAI;MACF,IAAMC,QAAQ,GAAG,IAAIlB,kBAAkB,CAAC,CAAC;MACzC,IAAMmB,MAAM,SAASlB,eAAe,CAACa,IAAI,EAAEI,QAAQ,CAAC;MACpD,OAAO;QACLE,IAAI,EAAED,MAAM,CAACE,IAAI,CAACC,WAAW;QAC7BC,KAAK,EAAEJ,MAAM,CAACE,IAAI,CAACE,KAAK;QACxBC,GAAG,EAAEL,MAAM,CAACE,IAAI,CAACG;MACnB,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBAbYV,gBAAgBA,CAAA;IAAA,OAAAC,IAAA,CAAAW,KAAA,OAAAC,SAAA;EAAA;AAAA,GAa5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}