{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar isDev = process.env.NODE_ENV === 'development';\nvar LOG_ENDPOINT = 'http://localhost:3000/api/logs';\nvar Logger = function () {\n  function Logger() {\n    _classCallCheck(this, Logger);\n  }\n  return _createClass(Logger, null, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator(function* () {\n        if (this.initialized) return;\n        try {\n          console.log('Initializing frontend logger...');\n          if (isDev) {\n            var response = yield fetch(LOG_ENDPOINT, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                level: 'info',\n                message: 'Logger initialized',\n                source: 'frontend'\n              })\n            });\n            if (!response.ok) throw new Error('Logger endpoint not available');\n          }\n          this.initialized = true;\n          console.log('Frontend logger initialized successfully');\n        } catch (error) {\n          console.error('Logger initialization failed:', error.message);\n          console.error('Full error:', error);\n          this.initialized = true;\n        }\n      });\n      function init() {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }()\n  }, {\n    key: \"log\",\n    value: function () {\n      var _log = _asyncToGenerator(function* (level, message) {\n        var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        if (!this.initialized) yield this.init();\n        var timestamp = new Date().toISOString();\n        var logEntry = {\n          timestamp: timestamp,\n          level: level,\n          message: message,\n          data: data,\n          source: 'frontend',\n          environment: isDev ? 'development' : 'production'\n        };\n        this.logs.push(logEntry);\n        if (isDev && this.initialized) {\n          try {\n            yield fetch(LOG_ENDPOINT, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(logEntry)\n            });\n          } catch (error) {\n            console.error('Failed to send log:', error);\n          }\n        }\n        if (isDev) {\n          console[level](`[${level.toUpperCase()}]`, message, data);\n        }\n      });\n      function log(_x, _x2) {\n        return _log.apply(this, arguments);\n      }\n      return log;\n    }()\n  }, {\n    key: \"info\",\n    value: function info(message, data) {\n      return this.log('info', message, data);\n    }\n  }, {\n    key: \"error\",\n    value: function error(message, data) {\n      return this.log('error', message, data);\n    }\n  }, {\n    key: \"debug\",\n    value: function debug(message, data) {\n      if (isDev) {\n        return this.log('debug', message, data);\n      }\n    }\n  }, {\n    key: \"getLogs\",\n    value: function getLogs() {\n      return this.logs;\n    }\n  }]);\n}();\nLogger.logs = [];\nLogger.initialized = false;\nexport default Logger;","map":{"version":3,"names":["isDev","process","env","NODE_ENV","LOG_ENDPOINT","Logger","_classCallCheck","_createClass","key","value","_init","_asyncToGenerator","initialized","console","log","response","fetch","method","headers","body","JSON","stringify","level","message","source","ok","Error","error","init","apply","arguments","_log","data","length","undefined","timestamp","Date","toISOString","logEntry","environment","logs","push","toUpperCase","_x","_x2","info","debug","getLogs"],"sources":["/Users/almorris/cursor-test/frontend/src/utils/logger.js"],"sourcesContent":["const isDev = process.env.NODE_ENV === 'development';\nconst LOG_ENDPOINT = 'http://localhost:3000/api/logs';\n\nclass Logger {\n  static logs = [];\n  static initialized = false;\n\n  static async init() {\n    if (this.initialized) return;\n    try {\n      console.log('Initializing frontend logger...');\n      // Test connection to log endpoint\n      if (isDev) {\n        const response = await fetch(LOG_ENDPOINT, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            level: 'info', \n            message: 'Logger initialized',\n            source: 'frontend'\n          })\n        });\n        if (!response.ok) throw new Error('Logger endpoint not available');\n      }\n      this.initialized = true;\n      console.log('Frontend logger initialized successfully');\n    } catch (error) {\n      console.error('Logger initialization failed:', error.message);\n      console.error('Full error:', error);\n      // Fall back to console-only logging\n      this.initialized = true;\n    }\n  }\n\n  static async log(level, message, data = {}) {\n    if (!this.initialized) await this.init();\n    const timestamp = new Date().toISOString();\n    const logEntry = {\n      timestamp,\n      level,\n      message,\n      data,\n      source: 'frontend',\n      environment: isDev ? 'development' : 'production'\n    };\n\n    // Store locally\n    this.logs.push(logEntry);\n\n    // Send to backend in development\n    if (isDev && this.initialized) {\n      try {\n        await fetch(LOG_ENDPOINT, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(logEntry)\n        });\n      } catch (error) {\n        console.error('Failed to send log:', error);\n      }\n    }\n\n    // Also log to console in development\n    if (isDev) {\n      console[level](`[${level.toUpperCase()}]`, message, data);\n    }\n  }\n\n  static info(message, data) {\n    return this.log('info', message, data);\n  }\n\n  static error(message, data) {\n    return this.log('error', message, data);\n  }\n\n  static debug(message, data) {\n    if (isDev) {\n      return this.log('debug', message, data);\n    }\n  }\n\n  static getLogs() {\n    return this.logs;\n  }\n}\n\nexport default Logger; "],"mappings":";;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa;AACpD,IAAMC,YAAY,GAAG,gCAAgC;AAAC,IAEhDC,MAAM;EAAA,SAAAA,OAAA;IAAAC,eAAA,OAAAD,MAAA;EAAA;EAAA,OAAAE,YAAA,CAAAF,MAAA;IAAAG,GAAA;IAAAC,KAAA;MAAA,IAAAC,KAAA,GAAAC,iBAAA,CAIV,aAAoB;QAClB,IAAI,IAAI,CAACC,WAAW,EAAE;QACtB,IAAI;UACFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;UAE9C,IAAId,KAAK,EAAE;YACT,IAAMe,QAAQ,SAASC,KAAK,CAACZ,YAAY,EAAE;cACzCa,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBAAE,cAAc,EAAE;cAAmB,CAAC;cAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;gBACnBC,KAAK,EAAE,MAAM;gBACbC,OAAO,EAAE,oBAAoB;gBAC7BC,MAAM,EAAE;cACV,CAAC;YACH,CAAC,CAAC;YACF,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;UACpE;UACA,IAAI,CAACd,WAAW,GAAG,IAAI;UACvBC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;QACzD,CAAC,CAAC,OAAOa,KAAK,EAAE;UACdd,OAAO,CAACc,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACJ,OAAO,CAAC;UAC7DV,OAAO,CAACc,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;UAEnC,IAAI,CAACf,WAAW,GAAG,IAAI;QACzB;MACF,CAAC;MAAA,SAzBYgB,IAAIA,CAAA;QAAA,OAAAlB,KAAA,CAAAmB,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAJF,IAAI;IAAA;EAAA;IAAApB,GAAA;IAAAC,KAAA;MAAA,IAAAsB,IAAA,GAAApB,iBAAA,CA2BjB,WAAiBW,KAAK,EAAEC,OAAO,EAAa;QAAA,IAAXS,IAAI,GAAAF,SAAA,CAAAG,MAAA,QAAAH,SAAA,QAAAI,SAAA,GAAAJ,SAAA,MAAG,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,CAAClB,WAAW,EAAE,MAAM,IAAI,CAACgB,IAAI,CAAC,CAAC;QACxC,IAAMO,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QAC1C,IAAMC,QAAQ,GAAG;UACfH,SAAS,EAATA,SAAS;UACTb,KAAK,EAALA,KAAK;UACLC,OAAO,EAAPA,OAAO;UACPS,IAAI,EAAJA,IAAI;UACJR,MAAM,EAAE,UAAU;UAClBe,WAAW,EAAEvC,KAAK,GAAG,aAAa,GAAG;QACvC,CAAC;QAGD,IAAI,CAACwC,IAAI,CAACC,IAAI,CAACH,QAAQ,CAAC;QAGxB,IAAItC,KAAK,IAAI,IAAI,CAACY,WAAW,EAAE;UAC7B,IAAI;YACF,MAAMI,KAAK,CAACZ,YAAY,EAAE;cACxBa,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBAAE,cAAc,EAAE;cAAmB,CAAC;cAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACiB,QAAQ;YAC/B,CAAC,CAAC;UACJ,CAAC,CAAC,OAAOX,KAAK,EAAE;YACdd,OAAO,CAACc,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;UAC7C;QACF;QAGA,IAAI3B,KAAK,EAAE;UACTa,OAAO,CAACS,KAAK,CAAC,CAAC,IAAIA,KAAK,CAACoB,WAAW,CAAC,CAAC,GAAG,EAAEnB,OAAO,EAAES,IAAI,CAAC;QAC3D;MACF,CAAC;MAAA,SAhCYlB,GAAGA,CAAA6B,EAAA,EAAAC,GAAA;QAAA,OAAAb,IAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAHhB,GAAG;IAAA;EAAA;IAAAN,GAAA;IAAAC,KAAA,EAkChB,SAAOoC,IAAIA,CAACtB,OAAO,EAAES,IAAI,EAAE;MACzB,OAAO,IAAI,CAAClB,GAAG,CAAC,MAAM,EAAES,OAAO,EAAES,IAAI,CAAC;IACxC;EAAC;IAAAxB,GAAA;IAAAC,KAAA,EAED,SAAOkB,KAAKA,CAACJ,OAAO,EAAES,IAAI,EAAE;MAC1B,OAAO,IAAI,CAAClB,GAAG,CAAC,OAAO,EAAES,OAAO,EAAES,IAAI,CAAC;IACzC;EAAC;IAAAxB,GAAA;IAAAC,KAAA,EAED,SAAOqC,KAAKA,CAACvB,OAAO,EAAES,IAAI,EAAE;MAC1B,IAAIhC,KAAK,EAAE;QACT,OAAO,IAAI,CAACc,GAAG,CAAC,OAAO,EAAES,OAAO,EAAES,IAAI,CAAC;MACzC;IACF;EAAC;IAAAxB,GAAA;IAAAC,KAAA,EAED,SAAOsC,OAAOA,CAAA,EAAG;MACf,OAAO,IAAI,CAACP,IAAI;IAClB;EAAC;AAAA;AAjFGnC,MAAM,CACHmC,IAAI,GAAG,EAAE;AADZnC,MAAM,CAEHO,WAAW,GAAG,KAAK;AAkF5B,eAAeP,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}